{"includedArchiveIdentifiers":["asynclifetime.AsyncLifetime"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/==(_:_:)","title":"static func == (AnyLifetimeCancellable, AnyLifetimeCancellable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/init(_:)-3saf4","title":"init<OtherCancellable>(OtherCancellable)","type":"init"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/init(_:)-5r24v","title":"init(() -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/store(in:)-54hq1","title":"func store(in: inout Set<AnyLifetimeCancellable>)","type":"method"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/store(in:)-82plk","title":"func store<Cancellables>(in: inout Cancellables)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynclifetime\/anylifetimecancellable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/asynclifetime\/anylifetimecancellable","title":"AnyLifetimeCancellable","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/lifetimecancellable\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/asynclifetime\/lifetimecancellable\/store(in:)-6osfc","title":"func store<Cancellables>(in: inout Cancellables)","type":"method"},{"path":"\/documentation\/asynclifetime\/lifetimecancellable\/store(in:)-9iuie","title":"func store(in: inout Set<AnyLifetimeCancellable>)","type":"method"}],"path":"\/documentation\/asynclifetime\/lifetimecancellable","title":"LifetimeCancellable","type":"protocol"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/withlifetime(isolation:of:consuming:foreach:)-1p3bp","title":"func withLifetime<Instance, OperationError, Stream>(isolation: isolated (any Actor)?, of: sending Instance, consuming: Stream, forEach: sending (_ object: Instance, _ element: Stream.Element) async throws(OperationError) -> Void) -> (task: Task<Void, any Error>, cancellable: any LifetimeCancellable)","type":"func"},{"path":"\/documentation\/asynclifetime\/withlifetime(isolation:of:consuming:foreach:)-3jfpy","title":"func withLifetime<Instance, Stream>(isolation: isolated (any Actor)?, of: sending Instance, consuming: Stream, forEach: sending (_ object: Instance, _ element: Stream.Element) async -> Void) -> (task: Task<Void, Never>, cancellable: any LifetimeCancellable)","type":"func"},{"path":"\/documentation\/asynclifetime\/withmainactorlifetime(of:consuming:foreach:)-1mi87","title":"func withMainActorLifetime<Instance, OperationError, Stream>(of: Instance, consuming: Stream, forEach: @MainActor (_ object: Instance, _ element: Stream.Element) throws(OperationError) -> Void) -> (task: Task<Void, any Error>, cancellable: any LifetimeCancellable)","type":"func"},{"path":"\/documentation\/asynclifetime\/withmainactorlifetime(of:consuming:foreach:)-4owqw","title":"func withMainActorLifetime<Instance, Stream>(of: Instance, consuming: Stream, forEach: @MainActor (_ object: Instance, _ element: Stream.Element) -> Void) -> (task: Task<Void, Never>, cancellable: any LifetimeCancellable)","type":"func"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynclifetime\/_concurrency\/asyncsequence\/assign(isolation:to:weakon:)","title":"func assign<Root>(isolation: isolated (any Actor)?, to: ReferenceWritableKeyPath<Root, Self.Element>, weakOn: Root) -> (task: Task<Void, any Error>, cancellable: any LifetimeCancellable)","type":"method"},{"path":"\/documentation\/asynclifetime\/_concurrency\/asyncsequence\/assignonmainactor(to:weakon:)","title":"func assignOnMainActor<Root>(to: ReferenceWritableKeyPath<Root, Self.Element>, weakOn: Root) -> (task: Task<Void, any Error>, cancellable: any LifetimeCancellable)","type":"method"}],"path":"\/documentation\/asynclifetime\/_concurrency\/asyncsequence","title":"AsyncSequence","type":"extension"}],"path":"\/documentation\/asynclifetime\/_concurrency","title":"_Concurrency","type":"extension"}],"path":"\/documentation\/asynclifetime","title":"AsyncLifetime","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}